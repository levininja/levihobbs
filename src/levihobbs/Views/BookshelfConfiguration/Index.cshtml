@using Microsoft.AspNetCore.Mvc.ModelBinding
@model levihobbs.Models.BookshelfConfigurationViewModel
@{
    ViewData["Title"] = "Bookshelf Configuration";
}

@section Styles {
<style>
    .config-section {
        margin-bottom: 2rem;
        padding: 1.5rem;
        border: 1px solid #dee2e6;
        border-radius: 0.5rem;
        background-color: #f8f9fa;
    }
    
    .bookshelf-list {
        max-height: 600px;
        overflow-y: auto;
        border: 1px solid #dee2e6;
        padding: 1rem;
        background-color: white;
    }
    
    .bookshelf-item, .grouping-item {
        padding: 0.5rem;
        border-bottom: 1px solid #eee;
    }
    
    .grouping-controls {
        margin-top: 1rem;
    }
    
    .grouping-form {
        background-color: white;
        padding: 1rem;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        margin-bottom: 1rem;
    }
    
    .btn-remove {
        background-color: #dc3545;
        color: white;
        border: none;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.8rem;
    }
</style>
}

@section Scripts {
<script>
    let groupingCounter = @Model.Configuration.Groupings.Count;
    const bookshelves = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Configuration.Bookshelves));
    
    function toggleCustomMappings() {
        const enabled = document.getElementById('EnableCustomMappings').checked;
        const sections = document.querySelectorAll('.custom-mapping-section');
        sections.forEach(section => {
            section.style.display = enabled ? 'block' : 'none';
        });
    }
    
    function addGrouping() {
        const container = document.getElementById('groupings-container');
        const template = document.getElementById('grouping-template').innerHTML;
        const html = template.replace(/\[INDEX\]/g, groupingCounter);
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = html;
        populateBookshelfCheckboxes(tempDiv.querySelector('[data-bookshelves]'), groupingCounter);
        container.appendChild(tempDiv.firstElementChild);
        
        // Set up event handlers for the new grouping
        const newGrouping = container.lastElementChild;
        const genreCheckbox = newGrouping.querySelector('input[id^="grouping_genre_"]');
        if (genreCheckbox) {
            genreCheckbox.addEventListener('change', function() {
                handleGroupingGenreBasedChange(this);
            });
        }
        
        // Set up event handler for the non-fiction checkbox in the new grouping
        const nonFictionCheckbox = newGrouping.querySelector('input[id^="grouping_nonfiction_"]');
        if (nonFictionCheckbox) {
            // Initially disable the non-fiction checkbox
            nonFictionCheckbox.disabled = true;
        }
        
        groupingCounter++;
    }
    
    function populateBookshelfCheckboxes(container, index) {
        if (!container) return;
        bookshelves.forEach(bs => {
            const div = document.createElement('div');
            div.className = 'form-check';
            const input = document.createElement('input');
            input.className = 'form-check-input';
            input.type = 'checkbox';
            input.name = `Configuration.Groupings[${index}].BookshelfIds`;
            input.value = bs.Id;
            input.id = `grouping_${index}_bookshelf_${bs.Id}`;
            const label = document.createElement('label');
            label.className = 'form-check-label';
            label.htmlFor = input.id;
            label.textContent = bs.Name;
            div.appendChild(input);
            div.appendChild(label);
            container.appendChild(div);
        });
    }
    
    function removeGrouping(button) {
        const form = button.closest('.grouping-form');
        const idInput = form.querySelector('input[name$="].Id"]');
        
        // Get all bookshelves that are in this grouping
        const bookshelfCheckboxes = form.querySelectorAll('input[name$="].BookshelfIds"]:checked');
        const bookshelfIds = Array.from(bookshelfCheckboxes).map(cb => cb.value);
        
        if (idInput && idInput.value !== '0') {
            // For existing groupings, mark for removal
            const shouldRemoveInput = document.createElement('input');
            shouldRemoveInput.type = 'hidden';
            shouldRemoveInput.name = idInput.name.replace('Id', 'ShouldRemove');
            shouldRemoveInput.value = 'true';
            form.appendChild(shouldRemoveInput);
            form.style.display = 'none';
        } else {
            // For new groupings, just remove from DOM
            form.remove();
        }
        
        // Check if any of the bookshelves from this grouping are no longer in any grouping
        setTimeout(() => {
            bookshelfIds.forEach(bookshelfId => {
                const bookshelfIndex = bookshelves.findIndex(bs => bs.Id == bookshelfId);
                if (bookshelfIndex !== -1) {
                    // Check if this bookshelf is still in any other grouping
                    const isInOtherGrouping = Array.from(document.querySelectorAll('.grouping-form:not([style*="display: none"])'))
                        .some(groupingForm => {
                            const checkedBoxes = groupingForm.querySelectorAll('input[name$="].BookshelfIds"]:checked');
                            return Array.from(checkedBoxes).some(cb => cb.value == bookshelfId);
                        });
                    
                    if (!isInOtherGrouping) {
                        // This bookshelf is no longer in any grouping, re-enable its checkboxes
                        const genreCheckbox = document.getElementById(`bookshelf_genre_${bookshelfIndex}`);
                        const displayCheckbox = document.getElementById(`bookshelf_${bookshelfIndex}`);
                        
                        if (genreCheckbox && displayCheckbox) {
                            displayCheckbox.disabled = false;
                            genreCheckbox.disabled = false;
                        }
                    }
                }
            });
        }, 0);
    }
    
    document.addEventListener('DOMContentLoaded', function() {
        toggleCustomMappings();
        
        // Set up event listeners for genre-based checkboxes
        setupGenreBasedHandlers();
        
        // Handle initial state for existing genre-based checkboxes
        handleInitialGenreBasedState();
    });
    
    function setupGenreBasedHandlers() {
        // Handle bookshelf genre-based checkboxes
        document.querySelectorAll('input[id^="bookshelf_genre_"]').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                handleBookshelfGenreBasedChange(this);
            });
        });
        
        // Handle grouping genre-based checkboxes
        document.querySelectorAll('input[id^="grouping_genre_"]').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                handleGroupingGenreBasedChange(this);
            });
        });
    }
    
    function handleInitialGenreBasedState() {
        // Handle initial state for individual bookshelves
        document.querySelectorAll('input[id^="bookshelf_genre_"]').forEach(checkbox => {
            handleBookshelfGenreBasedChange(checkbox);
        });
        
        // Handle initial state for groupings
        document.querySelectorAll('input[id^="grouping_genre_"]').forEach(checkbox => {
            handleGroupingGenreBasedChange(checkbox);
        });
    }
    
    function handleBookshelfGenreBasedChange(checkbox) {
        const index = checkbox.id.replace('bookshelf_genre_', '');
        const displayCheckbox = document.getElementById(`bookshelf_${index}`);
        const nonFictionCheckbox = document.getElementById(`bookshelf_nonfiction_${index}`);
        
        if (checkbox.checked) {
            // Auto-select display checkbox and disable it
            displayCheckbox.checked = true;
            displayCheckbox.disabled = true;
            // Enable non-fiction checkbox
            if (nonFictionCheckbox) {
                nonFictionCheckbox.disabled = false;
            }
        } else {
            // Re-enable display checkbox
            displayCheckbox.disabled = false;
            // Disable and uncheck non-fiction checkbox
            if (nonFictionCheckbox) {
                nonFictionCheckbox.checked = false;
                nonFictionCheckbox.disabled = true;
            }
        }
    }
    
    function handleGroupingGenreBasedChange(checkbox) {
        const index = checkbox.id.replace('grouping_genre_', '');
        const groupingForm = checkbox.closest('.grouping-form');
        const bookshelfCheckboxes = groupingForm.querySelectorAll('input[name$="].BookshelfIds"]:checked');
        const nonFictionCheckbox = document.getElementById(`grouping_nonfiction_${index}`);
        
        bookshelfCheckboxes.forEach(bsCheckbox => {
            const bookshelfId = bsCheckbox.value;
            const bookshelfIndex = bookshelves.findIndex(bs => bs.Id == bookshelfId);
            if (bookshelfIndex !== -1) {
                const genreCheckbox = document.getElementById(`bookshelf_genre_${bookshelfIndex}`);
                const displayCheckbox = document.getElementById(`bookshelf_${bookshelfIndex}`);
                
                if (checkbox.checked) {
                    // Set genre-based for all bookshelves in this grouping
                    genreCheckbox.checked = true;
                    displayCheckbox.checked = true;
                    displayCheckbox.disabled = true;
                    genreCheckbox.disabled = true;
                } else {
                    // Unset genre-based for all bookshelves in this grouping
                    genreCheckbox.checked = false;
                    displayCheckbox.disabled = false;
                    genreCheckbox.disabled = false;
                }
            }
        });
        
        // Handle non-fiction checkbox for the grouping
        if (checkbox.checked) {
            // Enable non-fiction checkbox for grouping
            if (nonFictionCheckbox) {
                nonFictionCheckbox.disabled = false;
            }
        } else {
            // Disable and uncheck non-fiction checkbox for grouping
            if (nonFictionCheckbox) {
                nonFictionCheckbox.checked = false;
                nonFictionCheckbox.disabled = true;
            }
        }
    }
</script>
}

<div class="container">
    <h1>Bookshelf Configuration</h1>
    
    @if (!string.IsNullOrEmpty(Model.SuccessMessage))
    {
        <div class="alert alert-success">@Model.SuccessMessage</div>
    }
    
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger">@Model.ErrorMessage</div>
    }
    
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <div>@error.ErrorMessage</div>
            }
        </div>
    }
    
    <form asp-action="Update" method="post">
        <div class="config-section">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" asp-for="Configuration.EnableCustomMappings" id="EnableCustomMappings" onchange="toggleCustomMappings()">
                <label class="form-check-label" for="EnableCustomMappings">
                    <strong>Enable Custom Bookshelf Mappings</strong>
                </label>
            </div>
            <small class="form-text text-muted">
                When enabled, only selected bookshelves and groupings will be displayed as filter tags on the book reviews page. 
                When disabled, all bookshelves will be shown as individual tags.
            </small>
        </div>
        
        <div class="custom-mapping-section config-section">
            <h3>Display Bookshelves</h3>
            <p>Select which individual bookshelves should be shown as filter tags:</p>
            <div class="alert alert-info">
                <strong>Note:</strong> Bookshelves that are assigned to groupings below will automatically be set to display, 
                even if they are not explicitly selected here. This ensures that grouped bookshelves are always available as filter options.
            </div>
            <div class="bookshelf-list">
                @for (int i = 0; i < Model.Configuration.Bookshelves.Count; i++)
                {
                    <div class="bookshelf-item">
                        <input type="hidden" asp-for="Configuration.Bookshelves[i].Id" />
                        <input type="hidden" asp-for="Configuration.Bookshelves[i].Name" />

                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" asp-for="Configuration.Bookshelves[i].Display" id="bookshelf_@i">
                            <label class="form-check-label" for="bookshelf_@i">
                                @Model.Configuration.Bookshelves[i].Name
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" asp-for="Configuration.Bookshelves[i].IsGenreBased" id="bookshelf_genre_@i" checked="@(Model.Configuration.Bookshelves[i].IsGenreBased || !Model.Configuration.Bookshelves.Any())">
                            <label class="form-check-label" for="bookshelf_genre_@i">
                                Genre-based
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" asp-for="Configuration.Bookshelves[i].IsNonFictionGenre" id="bookshelf_nonfiction_@i" disabled="@(!Model.Configuration.Bookshelves[i].IsGenreBased)">
                            <label class="form-check-label" for="bookshelf_nonfiction_@i">
                                Non-fiction
                            </label>
                        </div>
                    </div>
                }
            </div>
        </div>
        
        <div class="custom-mapping-section config-section">
            <h3>Bookshelf Groupings</h3>
            <p>Create groupings that combine multiple bookshelves under a single filter tag:</p>
            
            <div id="groupings-container">
                @for (int i = 0; i < Model.Configuration.Groupings.Count; i++)
                {
                    <div class="grouping-form">
                        <input type="hidden" asp-for="Configuration.Groupings[i].Id" />
                        <div class="row">
                            <div class="col-md-6">
                                <label asp-for="Configuration.Groupings[i].Name">Grouping Name:</label>
                                <input type="text" class="form-control" asp-for="Configuration.Groupings[i].Name" required />
                            </div>

                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" asp-for="Configuration.Groupings[i].IsGenreBased" id="grouping_genre_@i" checked="@(Model.Configuration.Groupings[i].IsGenreBased || !Model.Configuration.Groupings.Any())" />
                            <label class="form-check-label" for="grouping_genre_@i">
                                Genre-based
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" asp-for="Configuration.Groupings[i].IsNonFictionGenre" id="grouping_nonfiction_@i" disabled="@(!Model.Configuration.Groupings[i].IsGenreBased)" />
                            <label class="form-check-label" for="grouping_nonfiction_@i">
                                Non-fiction
                            </label>
                        </div>
                        <div class="grouping-controls">
                            <label>Select Bookshelves for this Grouping:</label>
                            <div class="bookshelf-list" data-bookshelves>
                                @foreach (var bookshelf in Model.Configuration.Bookshelves)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" 
                                               name="Configuration.Groupings[@i].BookshelfIds" 
                                               value="@bookshelf.Id"
                                               id="@($"grouping_{i}_bookshelf_{bookshelf.Id}")"
                                               @(Model.Configuration.Groupings[i].BookshelfIds.Contains(bookshelf.Id) ? "checked" : "") />
                                        <label class="form-check-label" for="@($"grouping_{i}_bookshelf_{bookshelf.Id}")">
                                            @bookshelf.Name
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>
                        <button type="button" class="btn btn-remove" onclick="removeGrouping(this)">Remove Grouping</button>
                    </div>
                }
            </div>
            
            <button type="button" class="btn btn-secondary" onclick="addGrouping()">Add New Grouping</button>
        </div>
        
        <div class="config-section">
            <button type="submit" class="btn btn-primary">Save Configuration</button>
            <a href="@Url.Action("Index")" class="btn btn-secondary">Cancel</a>
        </div>
    </form>
</div>

<script type="text/template" id="grouping-template">
    <div class="grouping-form">
        <input type="hidden" name="Configuration.Groupings[[INDEX]].Id" value="0" />
        <div class="row">
            <div class="col-md-6">
                <label>Grouping Name:</label>
                <input type="text" class="form-control" name="Configuration.Groupings[[INDEX]].Name" required />
            </div>

        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" name="Configuration.Groupings[[INDEX]].IsGenreBased" value="true" id="grouping_genre_[INDEX]" checked />
            <input type="hidden" name="Configuration.Groupings[[INDEX]].IsGenreBased" value="false" />
            <label class="form-check-label" for="grouping_genre_[INDEX]">
                Genre-based
            </label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" name="Configuration.Groupings[[INDEX]].IsNonFictionGenre" value="true" id="grouping_nonfiction_[INDEX]" disabled />
            <input type="hidden" name="Configuration.Groupings[[INDEX]].IsNonFictionGenre" value="false" />
            <label class="form-check-label" for="grouping_nonfiction_[INDEX]">
                Non-fiction
            </label>
        </div>
        <div class="grouping-controls">
            <label>Select Bookshelves for this Grouping:</label>
            <div class="bookshelf-list" data-bookshelves></div>
        </div>
        <button type="button" class="btn btn-remove" onclick="removeGrouping(this)">Remove Grouping</button>
    </div>
</script>