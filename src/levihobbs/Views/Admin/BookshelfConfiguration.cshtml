@using Microsoft.AspNetCore.Mvc.ModelBinding
@model levihobbs.Models.BookshelfConfigurationViewModel
@{
    ViewData["Title"] = "Bookshelf Configuration";
}

@section Styles {
<style>
    .config-section {
        margin-bottom: 2rem;
        padding: 1.5rem;
        border: 1px solid #dee2e6;
        border-radius: 0.5rem;
        background-color: #f8f9fa;
    }
    
    .bookshelf-list {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #dee2e6;
        padding: 1rem;
        background-color: white;
    }
    
    .bookshelf-item, .grouping-item {
        padding: 0.5rem;
        border-bottom: 1px solid #eee;
    }
    
    .grouping-controls {
        margin-top: 1rem;
    }
    
    .grouping-form {
        background-color: white;
        padding: 1rem;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        margin-bottom: 1rem;
    }
    
    .btn-remove {
        background-color: #dc3545;
        color: white;
        border: none;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.8rem;
    }
</style>
}

@section Scripts {
<script>
    let groupingCounter = @Model.Groupings.Count;
    const bookshelves = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Bookshelves));
    
    function toggleCustomMappings() {
        const enabled = document.getElementById('EnableCustomMappings').checked;
        const sections = document.querySelectorAll('.custom-mapping-section');
        sections.forEach(section => {
            section.style.display = enabled ? 'block' : 'none';
        });
    }
    
    function addGrouping() {
        const container = document.getElementById('groupings-container');
        const template = document.getElementById('grouping-template').innerHTML;
        const html = template.replace(/\[INDEX\]/g, groupingCounter);
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = html;
        populateBookshelfCheckboxes(tempDiv.querySelector('[data-bookshelves]'), groupingCounter);
        container.appendChild(tempDiv.firstElementChild);
        groupingCounter++;
    }
    
    function populateBookshelfCheckboxes(container, index) {
        if (!container) return;
        bookshelves.forEach(bs => {
            const div = document.createElement('div');
            div.className = 'form-check';
            const input = document.createElement('input');
            input.className = 'form-check-input';
            input.type = 'checkbox';
            input.name = `Groupings[${index}].SelectedBookshelfIds`;
            input.value = bs.Id;
            input.id = `grouping_${index}_bookshelf_${bs.Id}`;
            const label = document.createElement('label');
            label.className = 'form-check-label';
            label.htmlFor = input.id;
            label.textContent = bs.DisplayName || bs.Name;
            div.appendChild(input);
            div.appendChild(label);
            container.appendChild(div);
        });
    }
    
    function removeGrouping(button) {
        const form = button.closest('.grouping-form');
        const idInput = form.querySelector('input[name$="].Id"]');
        
        if (idInput && idInput.value !== '0') {
            // For existing groupings, mark for removal
            const shouldRemoveInput = document.createElement('input');
            shouldRemoveInput.type = 'hidden';
            shouldRemoveInput.name = idInput.name.replace('Id', 'ShouldRemove');
            shouldRemoveInput.value = 'true';
            form.appendChild(shouldRemoveInput);
            form.style.display = 'none';
        } else {
            // For new groupings, just remove from DOM
            form.remove();
        }
    }
    
    document.addEventListener('DOMContentLoaded', function() {
        toggleCustomMappings();
    });
</script>
}

<div class="container">
    <h1>Bookshelf Configuration</h1>
    
    @if (ViewBag.SuccessMessage != null)
    {
        <div class="alert alert-success">@ViewBag.SuccessMessage</div>
    }
    
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <div>@error.ErrorMessage</div>
            }
        </div>
    }
    
    <form asp-action="BookshelfConfiguration" method="post">
        <div class="config-section">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" asp-for="EnableCustomMappings" id="EnableCustomMappings" onchange="toggleCustomMappings()">
                <label class="form-check-label" for="EnableCustomMappings">
                    <strong>Enable Custom Bookshelf Mappings</strong>
                </label>
            </div>
            <small class="form-text text-muted">
                When enabled, only selected bookshelves and groupings will be displayed as filter tags on the book reviews page. 
                When disabled, all bookshelves will be shown as individual tags.
            </small>
        </div>
        
        <div class="custom-mapping-section config-section">
            <h3>Display Bookshelves</h3>
            <p>Select which individual bookshelves should be shown as filter tags:</p>
            <div class="bookshelf-list">
                @for (int i = 0; i < Model.Bookshelves.Count; i++)
                {
                    <div class="bookshelf-item">
                        <input type="hidden" asp-for="Bookshelves[i].Id" />
                        <input type="hidden" asp-for="Bookshelves[i].Name" />
                        <input type="hidden" asp-for="Bookshelves[i].DisplayName" />
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" asp-for="Bookshelves[i].Display" id="bookshelf_@i">
                            <label class="form-check-label" for="bookshelf_@i">
                                @(Model.Bookshelves[i].DisplayName ?? Model.Bookshelves[i].Name)
                            </label>
                        </div>
                    </div>
                }
            </div>
        </div>
        
        <div class="custom-mapping-section config-section">
            <h3>Bookshelf Groupings</h3>
            <p>Create groupings that combine multiple bookshelves under a single filter tag:</p>
            
            <div id="groupings-container">
                @for (int i = 0; i < Model.Groupings.Count; i++)
                {
                    <div class="grouping-form">
                        <input type="hidden" asp-for="Groupings[i].Id" />
                        <div class="row">
                            <div class="col-md-6">
                                <label asp-for="Groupings[i].Name">Grouping Name:</label>
                                <input type="text" class="form-control" asp-for="Groupings[i].Name" required />
                            </div>
                            <div class="col-md-6">
                                <label asp-for="Groupings[i].DisplayName">Display Name (optional):</label>
                                <input type="text" class="form-control" asp-for="Groupings[i].DisplayName" />
                            </div>
                        </div>
                        <div class="grouping-controls">
                            <label>Select Bookshelves for this Grouping:</label>
                            <div class="bookshelf-list" data-bookshelves>
                                @foreach (var bookshelf in Model.Bookshelves)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" 
                                               name="Groupings[@i].SelectedBookshelfIds" 
                                               value="@bookshelf.Id"
                                               id="@($"grouping_{i}_bookshelf_{bookshelf.Id}")"
                                               @(Model.Groupings[i].SelectedBookshelfIds.Contains(bookshelf.Id) ? "checked" : "") />
                                        <label class="form-check-label" for="@($"grouping_{i}_bookshelf_{bookshelf.Id}")">
                                            @(bookshelf.DisplayName ?? bookshelf.Name)
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>
                        <button type="button" class="btn btn-remove" onclick="removeGrouping(this)">Remove Grouping</button>
                    </div>
                }
            </div>
            
            <button type="button" class="btn btn-secondary" onclick="addGrouping()">Add New Grouping</button>
        </div>
        
        <div class="config-section">
            <button type="submit" class="btn btn-primary">Save Configuration</button>
            <a href="@Url.Action("Index")" class="btn btn-secondary">Cancel</a>
        </div>
    </form>
</div>

<script type="text/template" id="grouping-template">
    <div class="grouping-form">
        <input type="hidden" name="Groupings[[INDEX]].Id" value="0" />
        <div class="row">
            <div class="col-md-6">
                <label>Grouping Name:</label>
                <input type="text" class="form-control" name="Groupings[[INDEX]].Name" required />
            </div>
            <div class="col-md-6">
                <label>Display Name (optional):</label>
                <input type="text" class="form-control" name="Groupings[[INDEX]].DisplayName" />
            </div>
        </div>
        <div class="grouping-controls">
            <label>Select Bookshelves for this Grouping:</label>
            <div class="bookshelf-list" data-bookshelves></div>
        </div>
        <button type="button" class="btn btn-remove" onclick="removeGrouping(this)">Remove Grouping</button>
    </div>
</script>