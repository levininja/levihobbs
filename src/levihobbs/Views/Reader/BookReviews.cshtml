@model levihobbs.Models.BookReviewsViewModel
@{
    ViewData["Title"] = "Levi's Book Reviews";
}

@section Styles {
    <link rel="stylesheet" href="~/css/book-reviews.css?v=@Guid.NewGuid()" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Libre+Baskerville:wght@400;700&family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        .shelf-filters {
            margin-bottom: 2rem;
            padding: 1rem 0;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .shelf-filters h3 {
            margin-bottom: 1rem;
            color: #333;
            font-size: 1.1rem;
        }
        
        .shelf-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }
        
        .shelf-tag {
            display: inline-block;
            padding: 0.4rem 0.8rem;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 20px;
            text-decoration: none;
            color: #495057;
            font-size: 0.9rem;
            transition: all 0.2s ease;
        }
        
        .shelf-tag:hover {
            background-color: #e9ecef;
            color: #495057;
            text-decoration: none;
        }
        
        .shelf-tag.active {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }
        
        .book-shelves {
            margin-top: 0.5rem;
        }
        
        .book-shelf-tag {
            display: inline-block;
            padding: 0.2rem 0.5rem;
            background-color: #e9ecef;
            border-radius: 12px;
            font-size: 0.8rem;
            color: #495057;
            margin-right: 0.3rem;
            margin-bottom: 0.3rem;
        }
    </style>
}

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Function to fetch better book cover images
        async function fetchBookCover(bookId, searchTerm) {
            try {
                const response = await fetch(`/api/BookCover?bookTitle=${encodeURIComponent(searchTerm)}&bookReviewId=${bookId}`);
                if (response.ok) {
                    const imageBlob = await response.blob();
                    const imageUrl = URL.createObjectURL(imageBlob);
                    const imgElement = document.querySelector(`#book-cover-${bookId}`);
                    if (imgElement) {
                        imgElement.src = imageUrl;
                        imgElement.classList.add('high-quality');
                        // New: Update container to prevent re-fetching on page reload
                        const container = document.querySelector(`#book-cover-container-${bookId}`);
                        if (container) container.setAttribute('data-needs-better-cover', 'false');
                    }
                } else {
                    console.error(`Failed to fetch book cover for ${searchTerm}: ${response.status}`);  // New: Log failures
                }
            } catch (error) {
                console.error(`Error fetching book cover for ${searchTerm}:`, error);  // Existing, but emphasized
            }
        }
        
        // Get all books that need better covers
        const books = document.querySelectorAll('.book-cover-container');
        const booksNeedingBetterCovers = Array.from(books).filter(book => book.getAttribute('data-needs-better-cover') === 'true');
        
        // Fetch better covers for each book
        booksNeedingBetterCovers.forEach(book => {
            const bookId = book.dataset.bookId;
            const searchTerm = book.dataset.searchTerm;
            fetchBookCover(bookId, searchTerm);
        });
    });
</script>
}

<div class="reader-container">
    <div class="reader-header">
        <h1>Book Reviews</h1>
        <a href="https://www.goodreads.com/user/show/96423614-levi-hobbs" target="_blank" class="goodreads-icon-link" title="View my Goodreads profile">
            <i class="fab fa-goodreads"></i>
        </a>
    </div>
    
    <div class="shelf-filters">
        <h3>Filter by:</h3>
        <div class="shelf-tags">
            <!-- Recent Reviews Tag -->
            <a href="@Url.Action("BookReviews", "Reader", new { recent = true })" 
               class="shelf-tag @(Model.ShowRecentOnly ? "active" : "")">
                Recent Reviews
            </a>
            
            @if (Model.UseCustomMappings)
            {
                <!-- Show groupings -->
                @foreach (BookshelfGrouping grouping in Model.AllBookshelfGroupings)
                {
                    <a href="@Url.Action("BookReviews", "Reader", new { grouping = grouping.Name })" 
                       class="shelf-tag @(Model.SelectedGrouping?.Equals(grouping.Name, StringComparison.OrdinalIgnoreCase) == true ? "active" : "")">
                        @(grouping.DisplayName ?? grouping.Name)
                    </a>
                }
                
                <!-- Show individual bookshelves that are marked for display but not in groupings -->
                @foreach (Bookshelf bookshelf in Model.AllBookshelves)
                {
                    <a href="@Url.Action("Read", "Reader", new { category = "book-reviews", shelf = bookshelf.Name })" 
                       class="shelf-tag @(Model.SelectedShelf?.Equals(bookshelf.Name, StringComparison.OrdinalIgnoreCase) == true ? "active" : "")">
                        @(bookshelf.DisplayName ?? bookshelf.Name)
                    </a>
                }
            }
            else
            {
                <!-- Show all bookshelves as before -->
                @foreach (Bookshelf bookshelf in Model.AllBookshelves)
                {
                    <a href="@Url.Action("Read", "Reader", new { category = "book-reviews", shelf = bookshelf.Name })" 
                       class="shelf-tag @(Model.SelectedShelf?.Equals(bookshelf.Name, StringComparison.OrdinalIgnoreCase) == true ? "active" : "")">
                        @(bookshelf.DisplayName ?? bookshelf.Name)
                    </a>
                }
            }
        </div>
    </div>
        
<div class="story-cards">
    @foreach (BookReview review in Model.BookReviews)
    {
        <div class="card story-card">
            <div class="row g-0">
                <!-- New: Left column for book cover image (restores layout for JS compatibility) -->
                <div class="col-md-3">
                    <div class="book-cover-wrapper">
                        <div class="book-cover-container" 
                             id="book-cover-container-@review.Id" 
                             data-book-id="@review.Id" 
                             data-search-term="@review.TitleByAuthor" 
                             data-needs-better-cover="@(review.CoverImage == null ? "true" : "false")">
                            @if (review.CoverImage != null)
                            {
                                <!-- Display associated image if available (Base64 for inline rendering) -->
                                <img id="book-cover-@review.Id" 
                                     src="data:image/@review.CoverImage.FileType;base64,@Convert.ToBase64String(review.CoverImage.ImageData)" 
                                     alt="@review.Title cover" 
                                     class="book-cover high-quality">
                            }
                            else
                            {
                                <!-- Placeholder for reviews without images (JS will attempt to fetch) -->
                                <img id="book-cover-@review.Id" 
                                     src="/images/story icon.png" 
                                     alt="Book cover placeholder" 
                                     class="book-cover">
                            }
                        </div>
                    </div>
                </div>
                <!-- Adjusted: Right column for existing content (reduced from col-md-12 to col-md-8) -->
                <div class="col-md-9">
                    <div class="card-body">
                            <div class="book-info">
                                <h3 class="book-title">@review.Title</h3>
                                <p class="book-author">by @review.AuthorFirstName @review.AuthorLastName</p>
                                @if (review.OriginalPublicationYear.HasValue)
                                {
                                    <p class="book-published">Published: @review.OriginalPublicationYear</p>
                                }
                                @if (review.Bookshelves.Any())
                                {
                                    <div class="book-shelves">
                                        @foreach (var shelf in review.Bookshelves)
                                        {
                                            <span class="book-shelf-tag">@(shelf.DisplayName ?? shelf.Name)</span>
                                        }
                                    </div>
                                }
                            </div>
                            <div class="book-review-meta">
                                <span class="star-rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <i class="fas fa-star star @(i <= review.MyRating ? "filled" : "")"></i>
                                    }
                                </span>
                                <span class="date-read">Read on @review.DateRead.ToString("MMMM d, yyyy")</span>
                            </div>
                            <div class="story-preview">
                                @Html.Raw(review.PreviewText)
                            </div>
                            <div class="story-footer">
                                <div class="story-meta">
                                    <span class="story-reading-time">@review.ReadingTimeMinutes min. read</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    
    <div class="goodreads-follow">
        <h2>Looking for more book recommendations?</h2>
        <a href="https://www.goodreads.com/user/show/96423614-levi-hobbs" target="_blank" class="goodreads-button">
            <i class="fab fa-goodreads"></i>
            Follow Levi on Goodreads
        </a>
    </div>
</div>