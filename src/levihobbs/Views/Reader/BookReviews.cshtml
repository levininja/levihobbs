@model IEnumerable<levihobbs.Models.BookReview>
@{
    ViewData["Title"] = "Levi's Book Reviews";
}

@section Styles {
    <link rel="stylesheet" href="~/css/book-reviews.css?v=@Guid.NewGuid()" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Libre+Baskerville:wght@400;700&family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Function to fetch better book cover images
            async function fetchBookCover(bookId, title, author) {
                try {
                    const response = await fetch(`/api/BookCover?searchTerm=${encodeURIComponent(`${title} by ${author}`)}`);
                    
                    if (response.ok) {
                        // Convert the response to a blob
                        const imageBlob = await response.blob();
                        const imageUrl = URL.createObjectURL(imageBlob);
                        
                        // Find the image element and update it
                        const imgElement = document.querySelector(`#book-cover-${bookId}`);
                        if (imgElement) {
                            imgElement.src = imageUrl;
                            imgElement.classList.add('high-quality');
                        }
                    }
                } catch (error) {
                    console.error(`Error fetching book cover for ${title}:`, error);
                }
            }
            
            // Get all books that need better covers
            const books = document.querySelectorAll('.book-cover-container');
            const booksNeedingBetterCovers = Array.from(books).filter(book => book.getAttribute('data-needs-better-cover') === 'true');
            
            // Fetch better covers for each book
            booksNeedingBetterCovers.forEach(book => {
                const bookId = book.dataset.bookId;
                const title = book.dataset.title;
                const author = book.dataset.author;                
                fetchBookCover(bookId, title, author);
            });
        });
    </script>
}

<div class="reader-container">
    <div class="rss-feed-container">
        @await Component.InvokeAsync("GoodreadsRssFeed")
    </div>
    
    <div class="reader-header">
        <h1>Book Reviews</h1>
        <a href="https://www.goodreads.com/user/show/96423614-levi-hobbs" target="_blank" class="goodreads-icon-link" title="View my Goodreads profile">
            <i class="fab fa-goodreads"></i>
        </a>
    </div>
    
    <div class="story-cards">
        @foreach (var review in Model)
        {
            <div class="card story-card">
                <div class="row g-0">
                    <div class="col-md-4">
                        <div class="thumbnail-container">
                            @if (string.IsNullOrEmpty(review.ImageUrl) && review.ImageRawData == null)
                            {
                                <div class="thumbnail book-reviews">
                                    <div class="story-icon">
                                        <svg viewBox="0 0 24 24">
                                            <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"></path>
                                        </svg>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="thumbnail book-cover-container" 
                                     data-needs-better-cover="@(review.ImageRawData == null ? "true" : "false")"
                                     data-book-id="@review.Id"
                                     data-title="@review.Title"
                                     data-author="@review.Author">
                                    @if (review.ImageRawData != null)
                                    {
                                        <img id="book-cover-@review.Id" src="data:image/jpeg;base64,@Convert.ToBase64String(review.ImageRawData)" alt="@review.Title" class="high-quality" />
                                    }
                                    else
                                    {
                                        <img id="book-cover-@review.Id" src="@review.ImageUrl" alt="@review.Title" />
                                    }
                                </div>
                            }
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <div class="book-info">
                                <h3 class="book-title">@review.Title</h3>
                                <p class="book-author">by @review.Author</p>
                                <p class="book-published">Published: @review.DatePublished.Year</p>
                                <div class="book-tags">
                                    @foreach (var tag in review.Shelves)
                                    {
                                        <span class="book-tag">@tag</span>
                                    }
                                </div>
                            </div>
                            <div class="book-review-meta">
                                <span class="rating">@review.StarRating / 5 stars</span>
                                <span class="date-read">Read on @review.DateRead.ToString("MMMM d, yyyy")</span>
                            </div>
                            <div class="story-preview">
                                <p>@(review.PreviewText.Length > 200 ? review.PreviewText.Substring(0, 200) + "..." : review.PreviewText)</p>
                            </div>
                            <div class="story-footer">
                                <div class="story-meta">
                                    <span class="story-date">@review.DateRead.ToString("MMMM d, yyyy")</span>
                                    <span class="story-rating">@review.StarRating stars</span>
                                </div>
                                <a href="@review.ReadMoreUrl" class="btn btn-primary" target="_blank">Read More</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    
    <div class="goodreads-follow">
        <h2>Looking for more book recommendations?</h2>
        <a href="https://www.goodreads.com/user/show/96423614-levi-hobbs" target="_blank" class="goodreads-button">
            <i class="fab fa-goodreads"></i>
            Follow Levi on Goodreads
        </a>
    </div>
</div>