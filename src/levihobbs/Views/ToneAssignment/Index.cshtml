@model levihobbs.Models.ToneAssignmentViewModel
@{
    ViewData["Title"] = "Tone Assignment";
}

@section Styles {
    <link rel="stylesheet" href="~/css/tone-assignment.css" />
}

@section Scripts {
<script>
    // Initialize Bootstrap tooltips
    document.addEventListener('DOMContentLoaded', function() {
        $('[data-toggle="tooltip"]').tooltip({
            html: true,
            placement: 'bottom',
            template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner" style="max-width: 800px; width: 800px; font-size: 1rem;"></div></div>'
        });
        
        // Handle AI processing button click
        document.getElementById('sendForProcessing').addEventListener('click', function() {
            const batchSize = parseInt(document.getElementById('batchSize').value);
            const booksWithoutTones = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.BookReviews.Select(br => br.Id)));
            
            if (booksWithoutTones.length === 0) {
                alert('No books without tone assignments available for processing.');
                return;
            }
            
            const selectedBookIds = booksWithoutTones.slice(0, batchSize);
            const bookIdsParam = selectedBookIds.map(id => `bookIds=${id}`).join('&');
            
            // Disable button during processing
            const button = this;
            const originalText = button.textContent;
            button.disabled = true;
            button.textContent = 'Processing...';
            
            fetch(`/api/BookToneRecommendations?${bookIdsParam}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            }).then(response => {
                if (response.ok) {
                    alert(`Successfully sent ${selectedBookIds.length} books for AI processing.`);
                } else {
                    alert('Failed to send books for processing. Please try again.');
                }
            }).catch(error => {
                console.error('AI processing request failed:', error);
                alert('Failed to send books for processing. Please try again.');
            }).finally(() => {
                // Re-enable button
                button.disabled = false;
                button.textContent = originalText;
            });
        });
    });

    function toggleTone(bookReviewId, toneId, element) {
        const isSelected = element.classList.contains('selected');
        const hiddenInput = document.querySelector(`input[name="BookReviews[${getBookReviewIndex(bookReviewId)}].AssignedToneIds"][value="${toneId}"], input[name="BooksWithTones[${getBooksWithTonesIndex(bookReviewId)}].AssignedToneIds"][value="${toneId}"]`);
        
        if (isSelected) {
            element.classList.remove('selected');
            if (hiddenInput) {
                hiddenInput.remove();
            }
            // Remove from selected tones display
            removeToneFromSelectedDisplay(bookReviewId, toneId);
        } else {
            element.classList.add('selected');
            if (!hiddenInput) {
                const input = document.createElement('input');
                input.type = 'hidden';
                
                // Determine if this is in the main table or the accordion table
                const bookReviewIndex = getBookReviewIndex(bookReviewId);
                const booksWithTonesIndex = getBooksWithTonesIndex(bookReviewId);
                
                if (bookReviewIndex !== -1) {
                    input.name = `BookReviews[${bookReviewIndex}].AssignedToneIds`;
                } else if (booksWithTonesIndex !== -1) {
                    input.name = `BooksWithTones[${booksWithTonesIndex}].AssignedToneIds`;
                }
                
                input.value = toneId;
                document.getElementById(`book-${bookReviewId}-inputs`).appendChild(input);
            }
            // Add to selected tones display
            addToneToSelectedDisplay(bookReviewId, toneId, element);
        }
    }
    
    function getBookReviewIndex(bookReviewId) {
        const bookReviews = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.BookReviews.Select(br => br.Id)));
        return bookReviews.indexOf(bookReviewId);
    }
    
    function getBooksWithTonesIndex(bookReviewId) {
        const booksWithTones = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.BooksWithTones.Select(br => br.Id)));
        return booksWithTones.indexOf(bookReviewId);
    }
    
    function applySuggestion(bookReviewId, toneId) {
        const toneElement = document.querySelector(`[data-book="${bookReviewId}"][data-tone="${toneId}"]`);
        if (toneElement && !toneElement.classList.contains('selected')) {
            toggleTone(bookReviewId, toneId, toneElement);
        }
    }
    
    function applyAllSuggestions(bookReviewId) {
        const suggestionElements = document.querySelectorAll(`[data-book="${bookReviewId}"].suggested`);
        suggestionElements.forEach(element => {
            const toneId = element.getAttribute('data-tone');
            applySuggestion(bookReviewId, parseInt(toneId));
        });
    }
    
    function addToneToSelectedDisplay(bookReviewId, toneId, element) {
        const selectedTonesSection = document.querySelector(`#book-${bookReviewId}-inputs`).closest('td').querySelector('.selected-tones');
        const selectedTonesContainer = selectedTonesSection.querySelector('.selected-tones-list');
        const toneName = element.textContent.trim();
        
        // Find the correct color class by looking for the tone in the tone groups
        let colorClass = Array.from(element.classList).find(cls => cls.startsWith('tone-') && cls !== 'tone-tag');
        if (!colorClass || colorClass === 'tone-other') {
            // If we can't find a proper color class or it's tone-other, find the correct one
            const toneGroups = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ToneColorGroupings.Select(g => new { g.Name, g.ColorClass, Tones = g.Tones.Select(t => new { t.Id, t.Name }) })));
            for (const group of toneGroups) {
                if (group.Tones.some(t => t.Id === toneId)) {
                    colorClass = group.ColorClass;
                    break;
                }
            }
        }
        
        // Show the section if it's hidden
        selectedTonesSection.style.display = 'block';
        
        // Check if tone is already in the display
        const existingTone = selectedTonesContainer.querySelector(`[data-tone-id="${toneId}"]`);
        if (!existingTone) {
            const toneTag = document.createElement('span');
            toneTag.className = `tone-tag ${colorClass} selected removable`;
            toneTag.setAttribute('data-tone-id', toneId);
            toneTag.setAttribute('data-book-id', bookReviewId);
            toneTag.onclick = () => removeToneAssignment(bookReviewId, toneId);
            toneTag.innerHTML = `${toneName}<span class="remove-tone-x">&times;</span>`;
            selectedTonesContainer.appendChild(toneTag);
        }
    }
    
    function removeToneFromSelectedDisplay(bookReviewId, toneId) {
        const selectedTonesSection = document.querySelector(`#book-${bookReviewId}-inputs`).closest('td').querySelector('.selected-tones');
        const selectedTonesContainer = selectedTonesSection.querySelector('.selected-tones-list');
        const toneElement = selectedTonesContainer.querySelector(`[data-tone-id="${toneId}"]`);
        if (toneElement) {
            toneElement.remove();
            
            // If no more selected tones, hide the entire section
            if (selectedTonesContainer.children.length === 0) {
                selectedTonesSection.style.display = 'none';
            }
        }
    }
    
    function removeToneAssignment(bookReviewId, toneId) {
        // Remove the tone from the selected display
        removeToneFromSelectedDisplay(bookReviewId, toneId);
        
        // Remove the hidden input for this tone
        const hiddenInput = document.querySelector(`input[name="BookReviews[${getBookReviewIndex(bookReviewId)}].AssignedToneIds"][value="${toneId}"], input[name="BooksWithTones[${getBooksWithTonesIndex(bookReviewId)}].AssignedToneIds"][value="${toneId}"]`);
        if (hiddenInput) {
            hiddenInput.remove();
        }
        
        // Remove the selected class from the tone tag in the tone columns
        const toneElement = document.querySelector(`[data-book="${bookReviewId}"][data-tone="${toneId}"]`);
        if (toneElement) {
            toneElement.classList.remove('selected');
        }
    }

</script>
}

<div class="container-fluid">
    <h1>Tone Assignment</h1>
    
    <div class="batch-processing-section mb-4">
        <h4>AI Tone Recommendations</h4>
        <p class="text-muted">Send books without tone assignments to AI for batch processing and tone recommendations.</p>
        <div class="form-inline">
            <label for="batchSize" class="mr-2">Number of books to process:</label>
            <input type="number" id="batchSize" class="form-control mr-2" min="1" max="10" value="3" style="width: 80px;">
            <button type="button" id="sendForProcessing" class="btn btn-info">Send for AI Processing</button>
        </div>
        <small class="form-text text-muted">This will send the first X books without tone assignments to the AI for tone recommendations.</small>
    </div>
    
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">@TempData["SuccessMessage"]</div>
    }
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
    }
    
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <div>@error.ErrorMessage</div>
            }
        </div>
    }
    
    <form asp-action="Update" method="post">
        <!-- Books Without Tones Section -->
        <div class="section-title">Books Without Tones Assigned Yet</div>
        
        @if (Model.BookReviews.Any())
        {
            @await Html.PartialAsync("_ToneAssignmentTable", new ViewDataDictionary(ViewData) { 
                { "BookReviews", Model.BookReviews }, 
                { "ToneColorGroupings", Model.ToneColorGroupings },
                { "InputPrefix", "BookReviews" }
            })
        }
        else
        {
            <div class="alert alert-info">All books with review content have been assigned tones!</div>
        }
        
        <!-- Books With Tones Section (Accordion) -->
        @if (Model.BooksWithTones.Any())
        {
            <div class="panel-group mt-4" id="booksWithTonesAccordion">
                <div class="panel panel-default">
                    <div class="panel-heading" id="booksWithTonesHeading">
                        <h4 class="panel-title">
                            <a class="accordion-toggle" data-toggle="collapse" data-parent="#booksWithTonesAccordion" href="#booksWithTonesCollapse">
                                Books Already Assigned Tones (@Model.BooksWithTones.Count)
                            </a>
                        </h4>
                    </div>
                    <div id="booksWithTonesCollapse" class="panel-collapse collapse" aria-labelledby="booksWithTonesHeading">
                        <div class="panel-body">
                            @await Html.PartialAsync("_ToneAssignmentTable", new ViewDataDictionary(ViewData) { 
                                { "BookReviews", Model.BooksWithTones }, 
                                { "ToneColorGroupings", Model.ToneColorGroupings },
                                { "InputPrefix", "BooksWithTones" }
                            })
                        </div>
                    </div>
                </div>
            </div>
        }
        
        <div class="save-section">
            <button type="submit" class="btn btn-primary">Save Tone Assignments</button>
            <a href="@Url.Action("Index")" class="btn btn-secondary">Cancel</a>
        </div>
    </form>
</div>