@using BookDataApi.Dtos
@{
    List<BookReviewToneItemDto>? bookReviews = ViewData["BookReviews"] as List<BookReviewToneItemDto>;
    List<ToneColorGrouping>? toneColorGroupings = ViewData["ToneColorGroupings"] as List<ToneColorGrouping>;
    string? inputPrefix = ViewData["InputPrefix"] as string;
    if (bookReviews == null || toneColorGroupings == null || inputPrefix == null)
    {
        <text>Required data is missing.</text>
        return;
    }
}

<div class="tone-assignment-container">
    <table class="table tone-assignment-table">
        <thead>
            <tr>
                <th class="column-header book-info">Book Review</th>
                @foreach (ToneColorGrouping group in toneColorGroupings)
                {
                    <th class="column-header tone-column @group.ColorClass">@group.DisplayName Tones</th>
                }
                <th class="column-header suggestions-column">Suggestions</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < bookReviews.Count; i++)
            {
                BookReviewToneItemDto bookReview = bookReviews[i];
                <tr>
                    <td class="book-info">
                        <div class="book-title">@bookReview.Title</div>
                        <div class="book-author">by @bookReview.AuthorName</div>
                        @if (bookReview.Genres.Any())
                        {
                            <div class="book-genres">
                                <strong>Genres:</strong> @string.Join(", ", bookReview.Genres)
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(bookReview.MyReview))
                        {
                            <div>
                                <a href="#" class="review-link" data-toggle="tooltip" data-html="true" 
                                   title="@Html.Raw(bookReview.MyReview.Replace("\"", "&quot;"))">
                                    <i class="fas fa-info-circle"></i> Review
                                </a>
                            </div>
                        }
                        <div class="selected-tones mt-2" style="display: @(bookReview.AssignedToneIds.Any() ? "block" : "none");">
                            <small class="text-muted">Selected tones:</small>
                            <div class="selected-tones-list">
                                @foreach (int toneId in bookReview.AssignedToneIds)
                                {
                                    Tone? tone = toneColorGroupings.SelectMany(g => g.Tones).FirstOrDefault(t => t.Id == toneId);
                                    ToneColorGrouping? group = toneColorGroupings.FirstOrDefault(g => g.Tones.Any(t => t.Id == toneId));
                                    if (tone != null && group != null)
                                    {
                                        <span class="tone-tag @group.ColorClass selected" data-tone-id="@toneId">
                                            @tone.Name
                                        </span>
                                    }
                                }
                            </div>
                        </div>
                        <div id="book-@bookReview.Id-inputs">
                            <input type="hidden" name="@(inputPrefix)[@i].Id" value="@bookReview.Id" />
                            @foreach (int toneId in bookReview.AssignedToneIds)
                            {
                                <input type="hidden" name="@(inputPrefix)[@i].AssignedToneIds" value="@toneId" />
                            }
                        </div>
                    </td>
                    
                    @foreach (ToneColorGrouping group in toneColorGroupings)
                    {
                        <td class="tone-column">
                            @foreach (Tone tone in group.Tones)
                            {
                                bool isSelected = bookReview.AssignedToneIds.Contains(tone.Id);
                                bool isSuggested = bookReview.SuggestedToneIds.Contains(tone.Id);
                                <span class="tone-tag @group.ColorClass @(isSelected ? "selected" : "") @(isSuggested ? "suggested" : "")"
                                      data-book="@bookReview.Id"
                                      data-tone="@tone.Id"
                                      onclick="toggleTone(@bookReview.Id, @tone.Id, this)"
                                      title="@(tone.Description ?? tone.Name)">
                                    @tone.Name
                                </span>
                            }
                        </td>
                    }
                    
                    <td class="suggestions-column">
                        @if (bookReview.SuggestedToneIds.Any())
                        {
                            <div>
                                @foreach (int toneId in bookReview.SuggestedToneIds)
                                {
                                    Tone? tone = toneColorGroupings.SelectMany(g => g.Tones).FirstOrDefault(t => t.Id == toneId);
                                    if (tone != null)
                                    {
                                        <span class="tone-tag tone-other suggested"
                                              onclick="applySuggestion(@bookReview.Id, @toneId)"
                                              title="@(tone.Description ?? tone.Name)">
                                            @tone.Name
                                        </span>
                                    }
                                }
                            </div>
                            <button type="button" class="btn suggest-btn" 
                                    onclick="applyAllSuggestions(@bookReview.Id)">
                                Apply All
                            </button>
                        }
                        else
                        {
                            <em class="text-muted">No suggestions</em>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>